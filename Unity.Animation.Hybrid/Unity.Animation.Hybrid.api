// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace Unity.Animation
{
    public static class ClipBuilder
    {
        [System.Obsolete(@"ClipBuilder.AnimationClipToDenseClip has been deprecated. Use AnimationClip.ToDenseClip instead. (RemovedAfter 2020-07-15)")] public static Unity.Entities.BlobAssetReference<Unity.Animation.Clip> AnimationClipToDenseClip(UnityEngine.AnimationClip sourceClip, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
    }
}

namespace Unity.Animation.Hybrid
{
    public delegate System.UInt32 BindingHashDelegate(string path);

    public static class BindingHashUtils
    {
        public static Unity.Animation.Hybrid.BindingHashDelegate DefaultBindingHash;
        public static System.UInt32 HashFullPath(string path);
        public static System.UInt32 HashName(string path);
    }

    [System.Runtime.CompilerServices.Extension] public static class BlobAssetStoreExtensions
    {
        [System.Runtime.CompilerServices.Extension] public static Unity.Entities.BlobAssetReference<Unity.Animation.Clip> GetClip(Unity.Entities.BlobAssetStore blobAssetStore, UnityEngine.AnimationClip clip);
        [System.Runtime.CompilerServices.Extension] public static Unity.Entities.BlobAssetReference<Unity.Animation.RigDefinition> GetRigDefinition(Unity.Entities.BlobAssetStore blobAssetStore, Unity.Animation.Hybrid.RigComponent rigComponent);
    }

    [UnityEngine.DisallowMultipleComponent] public class BoneRendererComponent : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Material BoneMaterial;
        public Unity.Animation.BoneRendererUtils.BoneShape BoneShape;
        public UnityEngine.Color Color;
        public bool RenderBones;
        public Unity.Animation.Hybrid.RigComponent RigComponent;
        public float Size;
        [UnityEngine.Tooltip(@"The bones to render. Bones without a connection in the joints' list are not rendered for now.")] public UnityEngine.Transform[] Transforms;
        public BoneRendererComponent() {}
    }

    [Unity.Entities.ConverterVersion(@"Unity.Animation.Hybrid.BoneRendererConversion", 1)] [Unity.Entities.UpdateAfter(typeof(Unity.Animation.Hybrid.RigConversion))] [Unity.Entities.UpdateInGroup(typeof(GameObjectConversionGroup))] public class BoneRendererConversion : GameObjectConversionSystem
    {
        public BoneRendererConversion() {}
        protected virtual void OnCreateForCompiler();
        protected virtual void OnUpdate();
    }

    [System.Runtime.CompilerServices.Extension] public static class ClipConversion
    {
        [System.Runtime.CompilerServices.Extension] public static Unity.Entities.BlobAssetReference<Unity.Animation.Clip> ToDenseClip(UnityEngine.AnimationClip sourceClip, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
    }

    public class FloatChannel
    {
        public float DefaultValue;
        public string Id;
        public FloatChannel() {}
    }

    public interface IExposeTransform
    {
        public abstract void AddExposeTransform(Unity.Entities.EntityManager entityManager, Unity.Entities.Entity rig, Unity.Entities.Entity transform, int index);
    }

    public class IntChannel
    {
        public int DefaultValue;
        public string Id;
        public IntChannel() {}
    }

    public interface ISynchronizationTag
    {
        public abstract int State { get; set; }
        public abstract Unity.Animation.StringHash Type { get; }
    }

    public class ReadExposeTransform<TTransformHandle> : UnityEngine.MonoBehaviour, Unity.Animation.Hybrid.IExposeTransform where TTransformHandle : System.ValueType, Unity.Animation.IReadTransformHandle, new()
    {
        public ReadExposeTransform() {}
        public virtual void AddExposeTransform(Unity.Entities.EntityManager entityManager, Unity.Entities.Entity rig, Unity.Entities.Entity transform, int index);
    }

    public class RigComponent : UnityEngine.MonoBehaviour
    {
        public UnityEngine.Transform[] Bones;
        public Unity.Animation.Hybrid.FloatChannel[] FloatChannels;
        public Unity.Animation.Hybrid.IntChannel[] IntChannels;
        public Unity.Animation.Hybrid.RotationChannel[] RotationChannels;
        public Unity.Animation.Hybrid.ScaleChannel[] ScaleChannels;
        public Unity.Animation.Hybrid.TranslationChannel[] TranslationChannels;
        public RigComponent() {}
    }

    [Unity.Entities.ConverterVersion(@"Unity.Animation.Hybrid.RigConversion", 5)] [Unity.Entities.UpdateInGroup(typeof(GameObjectConversionGroup))] public class RigConversion : GameObjectConversionSystem
    {
        public RigConversion() {}
        protected virtual void OnCreateForCompiler();
        protected virtual void OnUpdate();
    }

    public static class RigGenerator
    {
        public static string ComputeRelativePath(UnityEngine.Transform target, UnityEngine.Transform ancestor);
        public static Unity.Animation.IAnimationChannel[] ExtractAnimationChannelFromRigComponent(Unity.Animation.Hybrid.RigComponent rigComponent, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
        public static Unity.Animation.SkeletonNode[] ExtractSkeletonNodesFromGameObject(UnityEngine.GameObject root, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
        public static Unity.Animation.SkeletonNode[] ExtractSkeletonNodesFromRigComponent(Unity.Animation.Hybrid.RigComponent rigComponent, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
        public static Unity.Animation.SkeletonNode[] ExtractSkeletonNodesFromTransforms(UnityEngine.Transform root, UnityEngine.Transform[] transforms, Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
        public static int FindTransformIndex(UnityEngine.Transform transform, UnityEngine.Transform[] transforms);
    }

    public static class RigRemapUtils
    {
        public static Unity.Entities.BlobAssetReference<Unity.Animation.RigRemapTable> CreateRemapTable(Unity.Animation.Hybrid.RigComponent srcRig, Unity.Animation.Hybrid.RigComponent dstRig, Unity.Animation.RigRemapUtils.ChannelFilter filter = 31, Unity.Animation.RigRemapUtils.OffsetOverrides offsetOverrides = default(Unity.Animation.RigRemapUtils.OffsetOverrides), Unity.Animation.Hybrid.BindingHashDelegate bindingHash = default(Unity.Animation.Hybrid.BindingHashDelegate));
    }

    public class RotationChannel
    {
        public UnityEngine.Quaternion DefaultValue;
        public string Id;
        public RotationChannel() {}
    }

    public class ScaleChannel
    {
        public UnityEngine.Vector3 DefaultValue;
        public string Id;
        public ScaleChannel() {}
    }

    [System.Obsolete(@"SkinnedMesh has been deprecated. (RemovedAfter 2020-06-24)")] public class SkinnedMesh : UnityEngine.MonoBehaviour
    {
        public Unity.Animation.Hybrid.RigComponent Rig;
        public UnityEngine.SkinnedMeshRenderer SkinnedMeshRenderer;
        public SkinnedMesh() {}
    }

    [System.Obsolete(@"SkinnedMeshConversion has been deprecated. (RemovedAfter 2020-06-24)")] [Unity.Entities.ConverterVersion(@"Unity.Animation.Hybrid.SkinnedMeshConversion", 1)] [Unity.Entities.UpdateInGroup(typeof(GameObjectConversionGroup))] public class SkinnedMeshConversion : GameObjectConversionSystem
    {
        public SkinnedMeshConversion() {}
        protected virtual void OnCreateForCompiler();
        protected virtual void OnUpdate();
    }

    [Unity.Entities.ConverterVersion(@"Unity.Animation.Hybrid.SkinnedMeshRendererConversion", 2)] [Unity.Entities.UpdateInGroup(typeof(GameObjectConversionGroup))] public class SkinnedMeshRendererConversion : GameObjectConversionSystem
    {
        public SkinnedMeshRendererConversion() {}
        protected virtual void OnCreateForCompiler();
        protected virtual void OnUpdate();
    }

    public class TranslationChannel
    {
        public UnityEngine.Vector3 DefaultValue;
        public string Id;
        public TranslationChannel() {}
    }

    public class WriteExposeTransform<TTransformHandle> : UnityEngine.MonoBehaviour, Unity.Animation.Hybrid.IExposeTransform where TTransformHandle : System.ValueType, Unity.Animation.IWriteTransformHandle, new()
    {
        public WriteExposeTransform() {}
        public virtual void AddExposeTransform(Unity.Entities.EntityManager entityManager, Unity.Entities.Entity rig, Unity.Entities.Entity transform, int index);
    }
}
